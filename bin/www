#!/usr/bin/env node

/**
 * Module dependencies.
 */

var httpApp = require('../app');
var io = require('../io');
var debug = require('debug')('web:server');
var http = require('http');



if ( httpApp.get("env") === "production" && !process.env.HEROKU) {

  // SOCKET.IO SERVER 
  var httpServer;
  var port_s = normalizePort('8082');
  httpApp.set('port', port_s);
  httpServer = http.createServer(httpApp);
  global.io = io.createServer(httpServer, httpApp.sessionMiddleware);
  httpServer.listen(port_s);
  httpServer.on('error', onError);
  httpServer.on('listening', onListening);
}

  //  HTTP SERVER FOR THE APP

  var port = normalizePort(process.env.PORT || '3000');
  httpApp.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(httpApp);
  if (httpApp.get("env") !== "production" && !process.env.HEROKU) {
    global.io = io.createServer(server, httpApp.sessionMiddleware);
  }
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

























